#!/bin/bash

argv0=$0
target=$1

echo "Running $argv0 $target"

### Set up some utility functions. ###

function runcmd() {
  cmd=$1
  echo "Running \"$cmd\""
  if $cmd; then
    echo "Successfully ran \"$cmd\""
  else
    echo "Failed: \"$cmd\""
    exit 1
  fi
}

function expect_dir_var() {
  var=$1
  msg=$2
  val=${!var}
  if test -z "$val"; then
    echo "$argv0: Expected $var to be nonempty. $msg Aborting"
    exit 1
  fi
  if test ! -d "$val"; then
    echo "$argv0: Expected $var (=\"$val\") to be a directory. $msg Aborting"
    exit 1
  fi
}

function expect_var() {
  var=$1
  msg=$2
  val=${!var}
  if test -z "$val"; then
    echo "$argv0: Expected $var to be nonempty. $msg Aborting"
    exit 1
  fi
}

function expect_file() {
  val=$1
  msg=$2
  if test ! -f "$val"; then
    echo "$argv0: Expected \"$val\" to be a file. $msg Aborting"
    exit 1
  fi
}

### Perform a series of checks to make sure eveything is set up correctly ###

expect_dir_var SRCROOT \
               "This variable is assigned by Xcode."

expect_file    $SRCROOT/../bootstrap.sh \
               "Could not find bootstrap file."

expect_var     ARCHS \
               "This variable is assigned by Xcode."

expect_var     BUILD_STYLE \
               "This variable is assigned by Xcode."

if test "$ACTION" != clean; then

  #expect_dir_var PTH_DIR \
  #               "Assign in Xcode->Preferences->Source Trees to GNU Pth directory."

  #expect_dir_var SSTMAC_PREFIX \
  #               "Assign in Xcode->Preferences->Source Trees to SST/macro installation directory."

  #expect_dir_var BOOST_DIR \
  #               "Assign in Xcode->Preferences->Source Trees to boost directory."

  expect_file    /opt/local/bin/glibtoolize \
                 "MacPorts version of libtool needed."

  expect_file    /opt/local/bin/autoconf \
                 "MacPorts version of autoconf needed."

  expect_file    /opt/local/bin/automake \
                 "MacPorts version of automake needed."

  expect_var     GCC_OPTIMIZATION_LEVEL \
                 "This variable is assigned by Xcode."

  expect_var     GCC_VERSION \
                 "This variable is assigned by Xcode."

  if test -z "$CURRENT_ARCH"; then
    if test "$ARCHS" != x86_64 -a "$ARCHS" != i386; then
      echo "Unexpected value for ARCHS: \"$ARCHS\""
      exit 1
    fi
    CURRENT_ARCH=$ARCHS
  fi

fi

### Finished checks. Now prepare for the build. ###

PATH=/opt/local/bin:$PATH

if test "$ACTION" = clean; then
  for arch in $ARCHS; do
    builddir=$SRCROOT/build/$arch/$BUILD_STYLE
    runcmd "/bin/rm -rf $builddir"
  done
  exit 0
fi

builddir=$SRCROOT/build/$CURRENT_ARCH/$BUILD_STYLE

if test ! -f "$SRCROOT/../configure"; then
  runcmd "cd $SRCROOT/.."
  runcmd "./bootstrap.sh"
fi

runcmd "mkdir -p $builddir"
runcmd "cd $builddir"

cflags="-O$GCC_OPTIMIZATION_LEVEL"
cxxflags="-O$GCC_OPTIMIZATION_LEVEL"
if test "$GCC_GENERATE_DEBUGGING_SYMBOLS" = YES -o "$DEBUGGING_SYMBOLS" = yes; then
  cflags="$cflags -g"
  cxxflags="$cxxflags -g"
fi

if test "$GCC_VERSION" = com.apple.compilers.llvm.clang.1_0; then
  cc=clang
  cxx=clang++
else
  cc=gcc
  cxx=g++
fi

if test ! -f config.status; then
  CXX="$cxx" CXXFLAGS="$cxxflags" CC="$cc" CFLAGS="$cflags" \
    runcmd "/bin/sh $SRCROOT/../configure"
fi

### Ready to build the autogenerated header. ###

runcmd "make $target"

